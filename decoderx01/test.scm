(include "funciones.scm")
(require racket/exn)
(define __testChars 
  (list
    ; key Char Encoded
   (list #\u #\v #\p)
   (list #\e #\b #\f)
   (list #\f #\s #\x)
   (list #\w #\e #\a)
   (list #\s #\n #\f)
   (list #\c #\i #\k)
   (list #\o #\l #\z)
   (list #\w #\i #\e)
   (list #\q #\k #\a)
   (list #\v #\h #\c)
   (list #\U #\B #\V)
   (list #\W #\M #\I)
   (list #\Y #\S #\Q)
   (list #\A #\S #\S)
   (list #\Y #\F #\D)
   (list #\I #\X #\F)
   (list #\N #\N #\A)
   (list #\N #\X #\K)
   (list #\P #\F #\U)
   (list #\C #\U #\W)
   (list #\f #\e #\j)
   (list #\V #\k #\f)
   (list #\z #\Q #\P)
   (list #\x #\a #\x)
   (list #\D #\G #\J)
   (list #\G #\P #\V)
   (list #\F #\t #\y)
   (list #\K #\v #\f)
   (list #\n #\G #\T)
   (list #\Y #\C #\A)
   (list #\L #\r #\c)
   (list #\m #\y #\k)
   (list #\d #\C #\F)
   (list #\u #\o #\i)
   (list #\J #\Z #\I)
   (list #\A #\R #\R)
   (list #\y #\Q #\O)
   (list #\b #\i #\j)
   (list #\w #\P #\L)
   (list #\q #\D #\T)
   (list #\v #\i #\d)
   (list #\r #\Q #\H)
   (list #\T #\q #\j)
   (list #\i #\l #\t)
   (list #\P #\Z #\O)
   (list #\v #\s #\n)
   (list #\b #\a #\b)
   (list #\u #\u #\o)
   (list #\m #\n #\z)
   (list #\G #\E #\K)
  )
)

(define __testStrings
  (list
    ; key string EncodedString
    (list "lemon" "Hola" "Ssxo")
    (list "lemon" "Hola Mundo! Tengo 5 MayúsCulas" "Ssxo Zfrpc! Gprsc 5 Zlc\\ggPfpmg")
    (list "carro" "Cuando más complicado se presente un reto, mayor será la gloria." "Eurerq m\\rj qqmgcweauf gg pivggnkv ip rvkc, oapff uei\\r zc gcffka.")
    (list "palabra" "bazzinga!!" "qakzjegp!!")
    (list "palabra" "¡Soy inevitable!; ¡Yo soy Iron MaN! xD" "¡Hoj iovvxtlbmv!; ¡Yd szy Jioc MlN! yU")
    (list "key" "El azar no existe; Dios no juega a los dados." "Op yjep xs chmqdi; Bssq xs heiek e jyw bkhmc.")
    (list "computacion" "Stay Hungry Stay Foolish" "Uhmn Bnnizm Fvok Uihlkav")
    (list "ingenieria" "Trust me I am an  engineer" "Beawg ui Z im ia  krtqrvmr")
    (list "programacion" "Si quieres encontrar los secretos del universo, piensa en términos de energía, frecuencia y vibración. - Nikola Tesla." "Hz eazedeu mbpdehxrr xou aspgvhuj dql wvwitigu, giqnui sa i\\vfsznas fm satiu\\or, fdeecsarzo e minrckw\\bc. - Ewqflm Tgazn.")
    (list "scheme" "Es un pequeño paso para un hombre, un salto gigante para la humanidad.-Neil Armstrong." "Wu br biiwl\\ra tsuv tmvs wu laqttl, yz wsnas smycuxq tsth pm lmohruhsf.-Uiup Sttwfvgpn.")
    (list "ciencia" "La ciencia de hoy es la tecnología del mañana.-Edward Teller." "Ni gvgvcki hr jwy ga pn vmcpwpbi\\qa fmp zc\\vapi.-Iqyirf Biynmr.")
    (list "ficcion" "Que la fuerza te acompañe" "Vcg ni thjzbc bs nhwori\\br")
    (list "ASUS" "Elemental, querido Watson" "Edyeefnsl, iowraxg Wsnkof")
    (list "terminator" "Hasta la vista, baby" "Aejfi ya owjme, smjl")
    (list "filosofia" "No existen preguntas sin respuesta, solo preguntas mal formuladas" "Sw plagymn uzpumbyis xqy fwgucexbl, ggzt xrjofblox uaq nzfeiqidfa")
  )
)

(define (displayCase case)
  (display "Char: ")
  (display (list-ref case 1))
  (display ", Key: ")
  (display (list-ref case 0))
  (display ", Char-Codificado: ")
  (display (list-ref case 2))
)

(define (displayCaseStr case)
  (display "\n\t\tString: ")
  (display (list-ref case 1))
  (display "\n\t\tKey: ")
  (display (list-ref case 0))
  (display "\n\t\tString Codificado: ")
  (display (list-ref case 2))
)

(define (testEncodeChar)
  (define ch ())
  (define case ())
  (define correct 0)
  (do
    ([index 0 (+ index 1)])
    ( (>= index (length __testChars)) )
    (set! case (list-ref __testChars index))
    (set! ch (encodeChar (list-ref case 1) (list-ref case 0)))
    (display "\tTest #")
    (display (+ index 1))
    (if (and (char? ch) (char=? ch (list-ref case 2)))
        (begin 
          (display " OK ")
          (set! correct (+ correct 1))
        )
        (display (string-append " Wrong (" (string ch) ") " ) )
    )
    (displayCase case)
    (newline)
  )
  (display "Resultado: ")
  (display correct)
  (display "/")
  (display (length __testChars))
)

(define (testDecodeChar)
  (define ch ())
  (define case ())
  (define correct 0)
  (do
    ([index 0 (+ index 1)])
    ( (>= index (length __testChars)) )
    (set! case (list-ref __testChars index))
    (set! ch (decodeChar (list-ref case 2) (list-ref case 0)))
    (display "\tTest #")
    (display (+ index 1))
    (if (and (char? ch) (char=? ch (list-ref case 1)))
        (begin 
          (display " OK ")
          (set! correct (+ correct 1))
        )
        (display (string-append " Wrong (" (string ch) ") " ) )
    )
    (displayCase case)
    (newline)
  )
  (display "Resultado: ")
  (display correct)
  (display "/")
  (display (length __testChars))
  (newline)
)

(define (testEncodeString)
  (define str ())
  (define case ())
  (define correct 0)
  (do
    ([index 0 (+ index 1)])
    ( (>= index (length __testStrings)) )
    (set! case (list-ref __testStrings index))
    (set! str (encodeString (list-ref case 1) (list-ref case 0)))
    (display "\tTest #")
    (display (+ index 1))
    (if (and (string? str) (equal? str (list-ref case 2)))
        (begin 
          (display " OK ")
          (set! correct (+ correct 1))
        )
        (display (string-append " Wrong retornado: " str ) )
    )
    (displayCaseStr case)
    (newline)
  )
  (display "Resultado: ")
  (display correct)
  (display "/")
  (display (length __testStrings))
)

(define (testDecodeString)
  (define str ())
  (define case ())
  (define correct 0)
  (do
    ([index 0 (+ index 1)])
    ( (>= index (length __testStrings)) )
    (set! case (list-ref __testStrings index))
    (set! str (decodeString (list-ref case 2) (list-ref case 0)))
    (display "\tTest #")
    (display (+ index 1))
    (if (and (string? str) (equal? str (list-ref case 1)))
        (begin 
          (display " OK ")
          (set! correct (+ correct 1))
        )
        (display (string-append " Wrong retornado: " str ) )
    )
    (displayCaseStr case)
    (newline)
  )
  (display "Resultado: ")
  (display correct)
  (display "/")
  (display (length __testStrings))
)

(define (test)
  (display "Test Proyecto #1 CC1 - 2019\n\n")
  (display "Presione enter para continuar...")
  (read-line)
  (display "\nTest de la funcion encodeChar\n")
  (with-handlers
    ([exn:fail?
      (lambda (n)
        (display "\tOcurrio un problema al probar su funcion encodeChar:\n\t")
        (display n)
        (newline)
      )
    ])
    (testEncodeChar)
  )
  (display " Presione enter para continuar...")
  (read-line)
  (newline)
  
  (display "Test de la funcion decodeChar\n")
  (with-handlers
    ([exn:fail?  
      (lambda (n)
        (display "\tOcurrio un problema al probar su funcion decodeChar:\n\t")
        (display n)
      )
    ])
    (testDecodeChar)
  )
  (display " Presione enter para continuar...")
  (read-line)
  (newline)
  
  (display "Test de la funcion encodeString\n")
  (with-handlers
    ([exn:fail?  
      (lambda (n)
        (display "\tOcurrio un problema al probar su funcion encodeString:\n\t")
        (display (exn->string n))
      )
    ])
    (testEncodeString)
  )
  (display " Presione enter para continuar...")
  (read-line)

  (newline)
  (display "Test de la funcion decodeString\n")
  (with-handlers
    ([exn:fail?  
      (lambda (n)
        (display "\tOcurrio un problema al probar su funcion decodeString:\n\t")
        (display (exn->string n))
      )
    ])
    (testDecodeString)
  )
)
(test)